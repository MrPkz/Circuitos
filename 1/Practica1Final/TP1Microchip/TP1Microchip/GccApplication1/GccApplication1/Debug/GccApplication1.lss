
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000023e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  0000023e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007c9  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ea  00000000  00000000  00000aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000304  00000000  00000000  00001193  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001498  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040c  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d7  00000000  00000000  000018f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000019cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b0 00 	call	0x160	; 0x160 <main>
  88:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <chequeo>:
#define F_CPU 8000000UL
#include <util/delay.h>

void chequeo(uint8_t* estado){
	static uint8_t ant=0;
	if((PIND & 1) && (ant == 0)) {
  90:	48 9b       	sbis	0x09, 0	; 9
  92:	08 c0       	rjmp	.+16     	; 0xa4 <chequeo+0x14>
  94:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <ant.1731>
  98:	21 11       	cpse	r18, r1
  9a:	04 c0       	rjmp	.+8      	; 0xa4 <chequeo+0x14>
		ant = 1;
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ant.1731>
  a2:	08 95       	ret
	}
	else if((!(PIND & 1)) && (ant == 1)){
  a4:	48 99       	sbic	0x09, 0	; 9
  a6:	17 c0       	rjmp	.+46     	; 0xd6 <chequeo+0x46>
  a8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <ant.1731>
  ac:	21 30       	cpi	r18, 0x01	; 1
  ae:	99 f4       	brne	.+38     	; 0xd6 <chequeo+0x46>
		*(estado)=(*(estado) + 1) % 2;
  b0:	fc 01       	movw	r30, r24
  b2:	20 81       	ld	r18, Z
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	2f 5f       	subi	r18, 0xFF	; 255
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
  ba:	21 70       	andi	r18, 0x01	; 1
  bc:	30 78       	andi	r19, 0x80	; 128
  be:	33 23       	and	r19, r19
  c0:	34 f4       	brge	.+12     	; 0xce <chequeo+0x3e>
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	31 09       	sbc	r19, r1
  c6:	2e 6f       	ori	r18, 0xFE	; 254
  c8:	3f 6f       	ori	r19, 0xFF	; 255
  ca:	2f 5f       	subi	r18, 0xFF	; 255
  cc:	3f 4f       	sbci	r19, 0xFF	; 255
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18
		ant = 0;
  d2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <ant.1731>
  d6:	08 95       	ret

000000d8 <actualizo>:
}

void actualizo(uint8_t estado){
	static uint8_t sec=0;
	static uint8_t sec2=0;
	if(estado==0){
  d8:	81 11       	cpse	r24, r1
  da:	25 c0       	rjmp	.+74     	; 0x126 <actualizo+0x4e>
		PORTB=(1<<sec)|(1<<(7-sec));
  dc:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <sec.1735>
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	bc 01       	movw	r22, r24
  e6:	04 2e       	mov	r0, r20
  e8:	02 c0       	rjmp	.+4      	; 0xee <actualizo+0x16>
  ea:	66 0f       	add	r22, r22
  ec:	77 1f       	adc	r23, r23
  ee:	0a 94       	dec	r0
  f0:	e2 f7       	brpl	.-8      	; 0xea <actualizo+0x12>
  f2:	27 e0       	ldi	r18, 0x07	; 7
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	24 1b       	sub	r18, r20
  f8:	31 09       	sbc	r19, r1
  fa:	02 c0       	rjmp	.+4      	; 0x100 <actualizo+0x28>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	2a 95       	dec	r18
 102:	e2 f7       	brpl	.-8      	; 0xfc <actualizo+0x24>
 104:	86 2b       	or	r24, r22
 106:	85 b9       	out	0x05, r24	; 5
		sec=(sec+1)%4;
 108:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <sec.1735>
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	83 70       	andi	r24, 0x03	; 3
 112:	90 78       	andi	r25, 0x80	; 128
 114:	99 23       	and	r25, r25
 116:	24 f4       	brge	.+8      	; 0x120 <actualizo+0x48>
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	8c 6f       	ori	r24, 0xFC	; 252
 11c:	9f 6f       	ori	r25, 0xFF	; 255
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <sec.1735>
 124:	08 95       	ret
		}else{
		PORTB=(1<<(7-sec2));
 126:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12a:	27 e0       	ldi	r18, 0x07	; 7
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	28 1b       	sub	r18, r24
 130:	31 09       	sbc	r19, r1
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <actualizo+0x64>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	2a 95       	dec	r18
 13e:	e2 f7       	brpl	.-8      	; 0x138 <actualizo+0x60>
 140:	85 b9       	out	0x05, r24	; 5
		sec2=(sec2+1)%8;
 142:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	87 70       	andi	r24, 0x07	; 7
 14c:	90 78       	andi	r25, 0x80	; 128
 14e:	99 23       	and	r25, r25
 150:	24 f4       	brge	.+8      	; 0x15a <actualizo+0x82>
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	88 6f       	ori	r24, 0xF8	; 248
 156:	9f 6f       	ori	r25, 0xFF	; 255
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 15e:	08 95       	ret

00000160 <main>:
	}
}
 
int main(void)
{
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	1f 92       	push	r1
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
	uint8_t estado=0;
 16a:	19 82       	std	Y+1, r1	; 0x01
	DDRB=0xFF;
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	84 b9       	out	0x04, r24	; 4
	PORTB=0;
 170:	15 b8       	out	0x05, r1	; 5
	DDRD&= 0xFE;
 172:	8a b1       	in	r24, 0x0a	; 10
 174:	8e 7f       	andi	r24, 0xFE	; 254
 176:	8a b9       	out	0x0a, r24	; 10
	PIND&= 0xFE;
 178:	89 b1       	in	r24, 0x09	; 9
 17a:	8e 7f       	andi	r24, 0xFE	; 254
 17c:	89 b9       	out	0x09, r24	; 9
	uint8_t cont=0;
 17e:	10 e0       	ldi	r17, 0x00	; 0
	while (1) {
		if(cont==0){
 180:	11 11       	cpse	r17, r1
 182:	03 c0       	rjmp	.+6      	; 0x18a <main+0x2a>
			actualizo(estado);
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	0e 94 6c 00 	call	0xd8	; 0xd8 <actualizo>
		}
		if(!(cont%50)){  
 18a:	89 e2       	ldi	r24, 0x29	; 41
 18c:	18 9f       	mul	r17, r24
 18e:	81 2d       	mov	r24, r1
 190:	11 24       	eor	r1, r1
 192:	86 95       	lsr	r24
 194:	86 95       	lsr	r24
 196:	86 95       	lsr	r24
 198:	91 2f       	mov	r25, r17
 19a:	22 e3       	ldi	r18, 0x32	; 50
 19c:	82 9f       	mul	r24, r18
 19e:	90 19       	sub	r25, r0
 1a0:	11 24       	eor	r1, r1
 1a2:	91 11       	cpse	r25, r1
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <main+0x4e>
			chequeo(&estado);
 1a6:	ce 01       	movw	r24, r28
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	0e 94 48 00 	call	0x90	; 0x90 <chequeo>
		}
		if(cont==249){cont=0;}else{cont++;}
 1ae:	19 3f       	cpi	r17, 0xF9	; 249
 1b0:	11 f0       	breq	.+4      	; 0x1b6 <main+0x56>
 1b2:	1f 5f       	subi	r17, 0xFF	; 255
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <main+0x58>
 1b6:	10 e0       	ldi	r17, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b8:	8f ec       	ldi	r24, 0xCF	; 207
 1ba:	97 e0       	ldi	r25, 0x07	; 7
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <main+0x5c>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0x62>
 1c2:	00 00       	nop
 1c4:	dd cf       	rjmp	.-70     	; 0x180 <main+0x20>

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
